import java.util.ArrayList;
import java.util.Random;
public class DuckRace {

	private final int RACE_DISTANCE = 100;
	private ArrayList<IDuck> ducks = new ArrayList<>();

	public void race() {
		while (!hasWinner()) {
			ducksRun();
		}
	}

	private boolean hasWinner() {
		ArrayList<IDuck> bestDucks = new ArrayList<>();
		int max = 0;
		for (IDuck duck : ducks) {
			if (duck.getDistance() > RACE_DISTANCE) {
				if (duck.getDistance() > max) {
					max = duck.getDistance();
					bestDucks = new ArrayList<>();
					bestDucks.add(duck);
				} else if (duck.getDistance() == max) {
					bestDucks.add(duck);
				}
			}
		}
		if (!bestDucks.isEmpty()) {
			for (IDuck r: bestDucks) {
				System.out.println(r.showData());
			}
		}

		return !bestDucks.isEmpty();
	}

	private void ducksRun() {
		for (IDuck duck : ducks) {
			duck.run();
		}
	}
	
	public void addDuck (IDuck duck) {
		ducks.add(duck);
	}
}

public interface IDuck {

	String showData();
	void run();
	int getDistance();

    
}
public abstract class Duck implements IDuck
{
        private final String name="";
        private int distance;
        	public String getName() {
		return name;
	}
	public void run(){
	   runSpecial();
    }
        protected abstract void runSpecial();
		public int getDistance() {
		return 0;
	}
		public String showData() {
		return name+" Distance "+0;
	}
	
}

public class SittingDuck implements IDuck{
	private final String name;
	public SittingDuck(String name) {
		super();
		this.name = name;
	}
	public int getDistance() {
		return 0;
	}
	public void run() {
	}
	public void runSpecial(){
	    
 }
	public String showData() {
		return name+" Distance "+0;
	}
}
public class TiringDuck implements IDuck{

	private static final int SPEED = 10;
	private final String name;
	private int distance=0;
	private int fatigue=0;
	private final Random random = new Random();
	public TiringDuck(String name) {
		super();
		this.name = name;
	}
	public int getDistance() {
		return distance;
	}
	public int getFatigue() {
		return fatigue;
	}
	public void run() {
		fatigue+= 2*random.nextDouble()*SPEED;
		distance += SPEED - SPEED* ( 1 - 100.0/(100+fatigue));
	}
	public void runSpecial() {
		fatigue+= 2*random.nextDouble()*SPEED;
		distance += SPEED - SPEED* ( 1 - 100.0/(100+fatigue));
	}
	public String showData() {
		return name+" Distance "+distance;
	}
}
public class RandomDuck implements IDuck{

	private static final int SPEED = 10;
	private final String name;
	private int distance=0;

	private final Random random = new Random();
	public RandomDuck(String name) {
		super();
		this.name = name;
	}
	public void run() {
		distance += SPEED * random.nextDouble();
	}
	public void runSpecial() {
		distance += SPEED * random.nextDouble();
	}
	public int getDistance() {
		return distance;
	}
	public String showData() {
		return name+" Distance "+distance;
	}
	
}